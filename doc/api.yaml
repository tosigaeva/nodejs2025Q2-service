openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: Returns all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - Users
      security:
        - bearer: []
    post:
      operationId: UserController_create
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
      tags:
        - Users
      security:
        - bearer: []
  /user/{id}:
    get:
      operationId: UserController_getById
      summary: Get user by ID
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      responses:
        '200':
          description: Returns a single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid UUID format
        '404':
          description: User not found
      tags:
        - Users
      security:
        - bearer: []
    put:
      operationId: UserController_updatePassword
      summary: Update user password
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid UUID or input data
        '403':
          description: Old password is incorrect
        '404':
          description: User not found
      tags:
        - Users
      security:
        - bearer: []
    delete:
      operationId: UserController_delete
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '400':
          description: Invalid UUID format
        '404':
          description: User not found
      tags:
        - Users
      security:
        - bearer: []
  /artist:
    get:
      operationId: ArtistController_getAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artists
    post:
      operationId: ArtistController_create
      summary: Create artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistController_getById
      summary: Get artist by ID
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid UUID
        '404':
          description: Artist not found
      tags:
        - Artists
    put:
      operationId: ArtistController_update
      summary: Update artist
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid UUID
        '404':
          description: Artist not found
      tags:
        - Artists
    delete:
      operationId: ArtistController_delete
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: UUID v4
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: Invalid UUID
        '404':
          description: Artist not found
      tags:
        - Artists
  /album:
    get:
      operationId: AlbumController_getAll
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Albums
    post:
      operationId: AlbumController_create
      summary: Create album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumController_getById
      summary: Get album by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          description: Album not found
      tags:
        - Albums
    put:
      operationId: AlbumController_update
      summary: Update album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
      tags:
        - Albums
    delete:
      operationId: AlbumController_delete
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album deleted
      tags:
        - Albums
  /track:
    get:
      operationId: TrackController_getAll
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Tracks
    post:
      operationId: TrackController_create
      summary: Create track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TrackController_getById
      summary: Get track by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: Track not found
      tags:
        - Tracks
    put:
      operationId: TrackController_update
      summary: Update track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags:
        - Tracks
    delete:
      operationId: TrackController_delete
      summary: Delete track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track deleted
      tags:
        - Tracks
  /favs:
    get:
      operationId: FavoritesController_getAll
      summary: Get all favorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Favorites'
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrack
      summary: Remove track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbum
      summary: Remove album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        '400':
          description: Invalid UUID.
        '422':
          description: Artist not found
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtist
      summary: Remove artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Favorites
info:
  title: Home Library API
  description: API documentation for Home Library
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID v4
        login:
          type: string
          example: john_john
          description: User login
        version:
          type: number
          example: 1
          description: Version number (increments on update)
        createdAt:
          type: number
          example: 1655000000
          description: Timestamp of creation
        updatedAt:
          type: number
          example: 1655000000
          description: Timestamp of last update
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: john_john
          description: User login (required)
        password:
          type: string
          example: strongPassword123
          description: User password (required)
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: oldPassword123
          description: Current user password
        newPassword:
          type: string
          example: newStrongPassword456
          description: New password (required)
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: UUID v4
        name:
          type: string
          example: Elvis Presley
          description: Artist name
        grammy:
          type: boolean
          example: true
          description: Does the artist have a Grammy award?
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Elvis Presley
          description: Artist name (required)
        grammy:
          type: boolean
          example: true
          description: Whether artist has a Grammy (required)
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Elvis Presley
          description: Updated artist name
        grammy:
          type: boolean
          example: false
          description: Updated Grammy status
    Album:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: UUID v4
        name:
          type: string
          example: 'Elvis for Everyone! '
          description: Album name
        year:
          type: number
          example: 1965
          description: Year the album was released
        artistId:
          type: string
          example: f3a6b6a4-8df9-4d88-8b3f-13540dd3c169
          description: Artist ID (nullable)
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Elvis for Everyone!
          description: Album name
        year:
          type: number
          example: 1965
          description: Release year
        artistId:
          type: string
          example: f3a6b6a4-8df9-4d88-8b3f-13540dd3c169
          description: Artist ID (optional)
      required:
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Elvis
          description: Album name
        year:
          type: number
          example: 1956
          description: Release year
        artistId:
          type: string
          example: null
          description: Artist ID
    Track:
      type: object
      properties:
        id:
          type: string
          example: 3f4c59cc-5a02-4bcb-9f93-d2d2e78d40c1
          description: UUID v4
        name:
          type: string
          example: Forget Me Never
          description: Track name
        artistId:
          type: string
          example: a1b2c3d4-5678-9101-1121-314151617181
          description: Artist ID (nullable)
          nullable: true
        albumId:
          type: string
          example: b2d3e4f5-6789-0101-1213-141516171819
          description: Album ID (nullable)
          nullable: true
        duration:
          type: number
          example: 125
          description: Track duration in seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Forget Me Never
          description: Track name
        duration:
          type: number
          example: 125
          description: Duration in seconds
        artistId:
          type: string
          example: artist-uuid
          description: Artist ID
        albumId:
          type: string
          example: album-uuid
          description: Album ID
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: '"I Met Her Today'
          description: Track name
        duration:
          type: number
          example: 162
          description: Duration in seconds
        artistId:
          type: string
          example: artist-uuid
          description: Artist ID
        albumId:
          type: string
          example: album-uuid
          description: Album ID
    Favorites:
      type: object
      properties:
        artists:
          example: []
          description: Favorite artists (IDs)
          type: array
          items:
            type: string
        albums:
          example: []
          description: Favorite albums (IDs)
          type: array
          items:
            type: string
        tracks:
          example: []
          description: Favorite tracks (IDs)
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
